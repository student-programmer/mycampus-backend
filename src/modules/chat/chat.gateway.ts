import {
  WebSocketGateway,
  WebSocketServer,
  OnGatewayConnection,
  OnGatewayDisconnect,
  SubscribeMessage,
  MessageBody,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { ChatService } from './chat.service';

@WebSocketGateway({
  cors: {
    origin: '*',
  },
  namespace: '/',
})
export class ChatGateway implements OnGatewayConnection, OnGatewayDisconnect {
  @WebSocketServer()
  server: Server;
  private users: Map<string, string> = new Map(); // { userId: socketId }

  constructor(private readonly chatService: ChatService) {
  }

  // üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async handleConnection(client: Socket) {
    const userId = this.getUserId(client);
    if (!userId) return;
    console.log(`User ${ userId } connected with socket ${ client.id }`);
    this.users.set(String(userId), client.id);
    await this.chatService.updateUserStatus(userId, true);
    this.server.emit('userStatus', { userId, isOnline: true });
  }

  // üìå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async handleDisconnect(client: Socket) {
    const userId = this.getUserId(client);
    if (!userId) return;

    console.log(`User ${ userId } disconnected`);
    this.users.delete(String(userId));
    await this.chatService.updateUserStatus(userId, false);
    this.server.emit('userStatus', { userId, isOnline: false });
  }

  // üìå –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
  private getUserId(client: Socket): number | null {
    const userId = client.handshake.query.userId;
    return Array.isArray(userId) ? Number(userId[0]) : Number(userId) || null;
  }

  // üìå –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ –∏–ª–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  @SubscribeMessage('sendMessage')
  async handleMessage(
    @MessageBody() data: { senderId: number; content: string; receiverId?: number },
  ) {
    if (!data.senderId || !data.content) return;
    try {
      const message = await this.chatService.createMessage(
        Number(data.senderId),
        data.content,
        Number(data.receiverId),
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å —Å–æ–∫–µ—Ç
      if (data?.senderId) {
        const senderSocketId = this.users.get(String(data.senderId));
        if (senderSocketId) {
          this.server.to(senderSocketId).emit('message', message);
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é, –µ—Å–ª–∏ receiverId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (data.receiverId) {
        const receiverSocketId = this.users.get(String(data.receiverId));
        if (receiverSocketId) {
          this.server.to(receiverSocketId).emit('message', message);
        }
      } else {
        this.server.emit('message', message);
      }
    } catch (e) {
      console.log(e);
    }
  }

}
